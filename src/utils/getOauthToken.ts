#!/usr/bin/env node

import { config } from "dotenv";
import { writeFileSync, readFileSync, existsSync } from "fs";
import { join } from "path";
import { KickOAuthServer, type OAuthConfig } from "./oauthServer";

// Load environment variables
config();

interface TokenResult {
  access_token: string;
  refresh_token?: string;
  token_type: string;
  expires_in: number;
  scope: string;
}

/**
 * Utility to get OAuth tokens and save them to .env file
 */
class OAuthTokenUtility {
  private port: number;
  private envPath: string;

  constructor(port = 3000) {
    this.port = port;
    this.envPath = join(process.cwd(), ".env");
  }

  /**
   * Load required environment variables
   */
  private loadEnvConfig() {
    const requiredEnvs = {
      clientId: process.env.KICK_CLIENT_ID,
      clientSecret: process.env.KICK_CLIENT_SECRET,
      scopes: process.env.KICK_SCOPES || "user:read channel:read channel:write chat:write streamkey:read events:subscribe moderation:ban",
    };

    if (!requiredEnvs.clientId || !requiredEnvs.clientSecret) {
      console.error("‚ùå Missing required environment variables:");
      console.error("   KICK_CLIENT_ID - Your OAuth app client ID");
      console.error("   KICK_CLIENT_SECRET - Your OAuth app client secret");
      console.error(
        '   KICK_SCOPES - Optional scopes (default: all available scopes)',
      );
      console.error("");
      console.error(
        "Please add these to your .env file or set them as environment variables.",
      );
      process.exit(1);
    }

    return {
      clientId: requiredEnvs.clientId,
      clientSecret: requiredEnvs.clientSecret,
      scopes: requiredEnvs.scopes.split(" "),
    };
  }

  /**
   * Update .env file with new tokens
   */
  private updateEnvFile(tokens: TokenResult) {
    let envContent = "";

    // Read existing .env file if it exists
    if (existsSync(this.envPath)) {
      envContent = readFileSync(this.envPath, "utf8");
    }

    // Parse existing env content
    const envLines = envContent.split("\n");
    const envVars = new Map<string, string>();

    // Parse existing variables
    envLines.forEach((line) => {
      const trimmed = line.trim();
      if (trimmed && !trimmed.startsWith("#")) {
        const [key, ...valueParts] = trimmed.split("=");
        if (key && valueParts.length > 0) {
          envVars.set(key, valueParts.join("="));
        }
      }
    });

    // Update with new token values
    envVars.set("KICK_ACCESS_TOKEN", tokens.access_token);
    envVars.set("KICK_TOKEN_TYPE", tokens.token_type);
    envVars.set("KICK_EXPIRES_IN", tokens.expires_in.toString());
    envVars.set("KICK_SCOPE", tokens.scope);

    if (tokens.refresh_token) {
      envVars.set("KICK_REFRESH_TOKEN", tokens.refresh_token);
    }

    // Add timestamp for reference
    envVars.set("KICK_TOKEN_UPDATED", new Date().toISOString());

    // Build new env content
    const newEnvLines: string[] = [];

    // Add header comment
    newEnvLines.push("# Kick.com OAuth Configuration");
    newEnvLines.push("# Generated by get-oauth-tokens utility");
    newEnvLines.push("");

    // Add all variables
    envVars.forEach((value, key) => {
      newEnvLines.push(`${key}=${value}`);
    });

    // Write back to file
    writeFileSync(this.envPath, newEnvLines.join("\n") + "\n");

    console.log("\n‚úÖ Tokens saved to .env file:");
    console.log(
      `   KICK_ACCESS_TOKEN=${tokens.access_token.substring(0, 20)}...`,
    );
    console.log(`   KICK_TOKEN_TYPE=${tokens.token_type}`);
    console.log(`   KICK_EXPIRES_IN=${tokens.expires_in}`);
    console.log(`   KICK_SCOPE=${tokens.scope}`);
    if (tokens.refresh_token) {
      console.log(
        `   KICK_REFRESH_TOKEN=${tokens.refresh_token.substring(0, 20)}...`,
      );
    }
  }

  /**
   * Run the OAuth flow
   */
  async run(): Promise<void> {
    console.log("üöÄ Kick.com OAuth Token Utility");
    console.log("==================================");
    console.log(`Port: ${this.port}`);
    console.log("");

    try {
      // Load configuration
      const envConfig = this.loadEnvConfig();
      console.log("‚úÖ Environment configuration loaded");

      // Setup OAuth config
      const redirectUri = `http://localhost:${this.port}/callback`;
      const oauthConfig: OAuthConfig = {
        clientId: envConfig.clientId,
        clientSecret: envConfig.clientSecret,
        redirectUri: redirectUri,
        scopes: envConfig.scopes,
      };

      console.log(`üìã OAuth Configuration:`);
      console.log(`   Client ID: ${envConfig.clientId}`);
      console.log(`   Redirect URI: ${redirectUri}`);
      console.log(`   Scopes: ${envConfig.scopes.join(", ")}`);
      console.log("");

      // Create OAuth server
      const oauthServer = new KickOAuthServer(oauthConfig, this.port);

      console.log("üåê Starting OAuth server...");
      await oauthServer.startServer();

      // Generate authorization URL
      const authUrl = oauthServer.getAuthorizationUrl();

      console.log("");
      console.log("üîê USER ACTION REQUIRED");
      console.log("========================");
      console.log(
        "Please visit the following URL in your browser to authorize:",
      );
      console.log("");
      console.log(`   ${authUrl}`);
      console.log("");
      console.log("The browser should open automatically...");

      // Try to open browser automatically
      try {
        const { exec } = await import("child_process");
        const command =
          process.platform === "darwin"
            ? "open"
            : process.platform === "win32"
              ? "start"
              : "xdg-open";
        exec(`${command} "${authUrl}"`);
      } catch {
        console.log(
          "Could not open browser automatically. Please copy the URL above.",
        );
      }

      console.log("");
      console.log("‚è≥ Waiting for authorization...");
      console.log("   (Timeout: 5 minutes)");

      // Wait for authorization code
      const authCode = await oauthServer.waitForAuthorizationCode(300000); // 5 minutes
      console.log("‚úÖ Authorization code received!");

      console.log("üîÑ Exchanging code for tokens...");
      const tokens = await oauthServer.exchangeCodeForToken(authCode);

      console.log("‚úÖ Tokens received successfully!");

      // Save tokens to .env file
      this.updateEnvFile(tokens);

      console.log("");
      console.log("üéâ OAuth setup complete!");
      console.log("");
      console.log("You can now use these tokens in your kick-js applications:");
      console.log("");
      console.log("```javascript");
      console.log("const client = createClient();");
      console.log('await client.login("channelname", {');
      console.log('  type: "tokens",');
      console.log("  credentials: {");
      console.log("    bearerToken: process.env.KICK_ACCESS_TOKEN,");
      console.log('    xsrfToken: "", // Not needed for OAuth tokens');
      console.log('    cookies: ""   // Not needed for OAuth tokens');
      console.log("  }");
      console.log("});");
      console.log("```");

      // Clean up
      await oauthServer.stopServer();
      process.exit(0);
    } catch (error) {
      console.error("");
      console.error("‚ùå OAuth flow failed:");
      console.error(`   ${String(error)}`);
      console.error("");

      if (String(error).includes("Authorization timeout")) {
        console.error(
          "üí° The authorization timed out. Please try again and complete",
        );
        console.error("   the authorization within 5 minutes.");
      } else if (String(error).includes("Token exchange failed")) {
        console.error(
          "üí° Token exchange failed. Check your OAuth app configuration:",
        );
        console.error("   - Verify client ID and client secret");
        console.error("   - Ensure redirect URI matches your app settings");
        console.error(
          `   - Redirect URI should be: http://localhost:${this.port}/callback`,
        );
      }

      process.exit(1);
    }
  }
}

// CLI interface
async function main() {
  const args = process.argv.slice(2);

  // Parse command line arguments
  let port = 3000;

  for (let i = 0; i < args.length; i++) {
    const arg = args[i];

    if (arg === "--port" && i + 1 < args.length) {
      const portStr = args[i + 1];
      if (portStr) {
        port = parseInt(portStr, 10);
        if (isNaN(port)) {
          console.error("‚ùå Invalid port number");
          process.exit(1);
        }
        i++;
      }
    } else if (arg === "--help" || arg === "-h") {
      console.log("Kick.com OAuth Token Utility");
      console.log("");
      console.log("Usage: npm run getOauthTokens [-- --port PORT]");
      console.log("");
      console.log("Options:");
      console.log("  --port <port>       Local server port (default: 3000)");
      console.log("  --help, -h          Show this help message");
      console.log("");
      console.log("Environment variables required:");
      console.log("  KICK_CLIENT_ID      Your OAuth app client ID");
      console.log("  KICK_CLIENT_SECRET  Your OAuth app client secret");
      console.log(
        '  KICK_SCOPES         Optional scopes (default: all available scopes)',
      );
      console.log("");
      console.log("Setup:");
      console.log(
        "1. Create OAuth app at https://kick.com/developer/applications",
      );
      console.log(
        "2. Set redirect URI to: http://localhost:3000/callback (or your chosen port)",
      );
      console.log("3. Copy .env.example to .env and fill in your credentials");
      console.log("4. Run: npm run getOauthTokens");
      console.log("");
      console.log("Example:");
      console.log("  npm run getOauthTokens -- --port 8080");
      process.exit(0);
    } else {
      console.error(`‚ùå Unknown argument: ${arg}`);
      console.error("Use --help for usage information");
      process.exit(1);
    }
  }

  // Run the utility
  const utility = new OAuthTokenUtility(port);
  await utility.run();
}

// Handle Ctrl+C gracefully
process.on("SIGINT", () => {
  console.log("\n\nüëã OAuth flow cancelled by user");
  process.exit(0);
});

// Run if called directly (ES module check)
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch((error) => {
    console.error("‚ùå Unexpected error:", error);
    process.exit(1);
  });
}

export { OAuthTokenUtility };
